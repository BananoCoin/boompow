// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns LoginInput.Email, and is useful for accessing the field via an interface.
func (v *LoginInput) GetEmail() string { return v.Email }

// GetPassword returns LoginInput.Password, and is useful for accessing the field via an interface.
func (v *LoginInput) GetPassword() string { return v.Password }

type RefreshTokenInput struct {
	Token string `json:"token"`
}

// GetToken returns RefreshTokenInput.Token, and is useful for accessing the field via an interface.
func (v *RefreshTokenInput) GetToken() string { return v.Token }

type ResendConfirmationEmailInput struct {
	Email string `json:"email"`
}

// GetEmail returns ResendConfirmationEmailInput.Email, and is useful for accessing the field via an interface.
func (v *ResendConfirmationEmailInput) GetEmail() string { return v.Email }

type UserInput struct {
	Email          string   `json:"email"`
	Password       string   `json:"password"`
	Type           UserType `json:"type"`
	BanAddress     string   `json:"banAddress"`
	ServiceName    string   `json:"serviceName"`
	ServiceWebsite string   `json:"serviceWebsite"`
}

// GetEmail returns UserInput.Email, and is useful for accessing the field via an interface.
func (v *UserInput) GetEmail() string { return v.Email }

// GetPassword returns UserInput.Password, and is useful for accessing the field via an interface.
func (v *UserInput) GetPassword() string { return v.Password }

// GetType returns UserInput.Type, and is useful for accessing the field via an interface.
func (v *UserInput) GetType() UserType { return v.Type }

// GetBanAddress returns UserInput.BanAddress, and is useful for accessing the field via an interface.
func (v *UserInput) GetBanAddress() string { return v.BanAddress }

// GetServiceName returns UserInput.ServiceName, and is useful for accessing the field via an interface.
func (v *UserInput) GetServiceName() string { return v.ServiceName }

// GetServiceWebsite returns UserInput.ServiceWebsite, and is useful for accessing the field via an interface.
func (v *UserInput) GetServiceWebsite() string { return v.ServiceWebsite }

type UserType string

const (
	UserTypeProvider  UserType = "PROVIDER"
	UserTypeRequester UserType = "REQUESTER"
)

// __createUserInput is used internally by genqlient
type __createUserInput struct {
	Input UserInput `json:"input"`
}

// GetInput returns __createUserInput.Input, and is useful for accessing the field via an interface.
func (v *__createUserInput) GetInput() UserInput { return v.Input }

// __loginUserInput is used internally by genqlient
type __loginUserInput struct {
	Input LoginInput `json:"input"`
}

// GetInput returns __loginUserInput.Input, and is useful for accessing the field via an interface.
func (v *__loginUserInput) GetInput() LoginInput { return v.Input }

// __refreshTokenInput is used internally by genqlient
type __refreshTokenInput struct {
	Input RefreshTokenInput `json:"input"`
}

// GetInput returns __refreshTokenInput.Input, and is useful for accessing the field via an interface.
func (v *__refreshTokenInput) GetInput() RefreshTokenInput { return v.Input }

// __resendConfirmationEmailInput is used internally by genqlient
type __resendConfirmationEmailInput struct {
	Input ResendConfirmationEmailInput `json:"input"`
}

// GetInput returns __resendConfirmationEmailInput.Input, and is useful for accessing the field via an interface.
func (v *__resendConfirmationEmailInput) GetInput() ResendConfirmationEmailInput { return v.Input }

// createUserCreateUser includes the requested fields of the GraphQL type User.
type createUserCreateUser struct {
	Email string `json:"email"`
	Id    string `json:"id"`
}

// GetEmail returns createUserCreateUser.Email, and is useful for accessing the field via an interface.
func (v *createUserCreateUser) GetEmail() string { return v.Email }

// GetId returns createUserCreateUser.Id, and is useful for accessing the field via an interface.
func (v *createUserCreateUser) GetId() string { return v.Id }

// createUserResponse is returned by createUser on success.
type createUserResponse struct {
	CreateUser createUserCreateUser `json:"createUser"`
}

// GetCreateUser returns createUserResponse.CreateUser, and is useful for accessing the field via an interface.
func (v *createUserResponse) GetCreateUser() createUserCreateUser { return v.CreateUser }

// generateOrGetServiceTokenResponse is returned by generateOrGetServiceToken on success.
type generateOrGetServiceTokenResponse struct {
	GenerateOrGetServiceToken string `json:"generateOrGetServiceToken"`
}

// GetGenerateOrGetServiceToken returns generateOrGetServiceTokenResponse.GenerateOrGetServiceToken, and is useful for accessing the field via an interface.
func (v *generateOrGetServiceTokenResponse) GetGenerateOrGetServiceToken() string {
	return v.GenerateOrGetServiceToken
}

// loginUserLoginLoginResponse includes the requested fields of the GraphQL type LoginResponse.
type loginUserLoginLoginResponse struct {
	Token string `json:"token"`
}

// GetToken returns loginUserLoginLoginResponse.Token, and is useful for accessing the field via an interface.
func (v *loginUserLoginLoginResponse) GetToken() string { return v.Token }

// loginUserResponse is returned by loginUser on success.
type loginUserResponse struct {
	Login loginUserLoginLoginResponse `json:"login"`
}

// GetLogin returns loginUserResponse.Login, and is useful for accessing the field via an interface.
func (v *loginUserResponse) GetLogin() loginUserLoginLoginResponse { return v.Login }

// refreshTokenResponse is returned by refreshToken on success.
type refreshTokenResponse struct {
	RefreshToken string `json:"refreshToken"`
}

// GetRefreshToken returns refreshTokenResponse.RefreshToken, and is useful for accessing the field via an interface.
func (v *refreshTokenResponse) GetRefreshToken() string { return v.RefreshToken }

// resendConfirmationEmailResponse is returned by resendConfirmationEmail on success.
type resendConfirmationEmailResponse struct {
	ResendConfirmationEmail bool `json:"resendConfirmationEmail"`
}

// GetResendConfirmationEmail returns resendConfirmationEmailResponse.ResendConfirmationEmail, and is useful for accessing the field via an interface.
func (v *resendConfirmationEmailResponse) GetResendConfirmationEmail() bool {
	return v.ResendConfirmationEmail
}

func createUser(
	ctx context.Context,
	client graphql.Client,
	input UserInput,
) (*createUserResponse, error) {
	req := &graphql.Request{
		OpName: "createUser",
		Query: `
mutation createUser ($input: UserInput!) {
	createUser(input: $input) {
		email
		id
	}
}
`,
		Variables: &__createUserInput{
			Input: input,
		},
	}
	var err error

	var data createUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func generateOrGetServiceToken(
	ctx context.Context,
	client graphql.Client,
) (*generateOrGetServiceTokenResponse, error) {
	req := &graphql.Request{
		OpName: "generateOrGetServiceToken",
		Query: `
mutation generateOrGetServiceToken {
	generateOrGetServiceToken
}
`,
	}
	var err error

	var data generateOrGetServiceTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func loginUser(
	ctx context.Context,
	client graphql.Client,
	input LoginInput,
) (*loginUserResponse, error) {
	req := &graphql.Request{
		OpName: "loginUser",
		Query: `
mutation loginUser ($input: LoginInput!) {
	login(input: $input) {
		token
	}
}
`,
		Variables: &__loginUserInput{
			Input: input,
		},
	}
	var err error

	var data loginUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func refreshToken(
	ctx context.Context,
	client graphql.Client,
	input RefreshTokenInput,
) (*refreshTokenResponse, error) {
	req := &graphql.Request{
		OpName: "refreshToken",
		Query: `
mutation refreshToken ($input: RefreshTokenInput!) {
	refreshToken(input: $input)
}
`,
		Variables: &__refreshTokenInput{
			Input: input,
		},
	}
	var err error

	var data refreshTokenResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func resendConfirmationEmail(
	ctx context.Context,
	client graphql.Client,
	input ResendConfirmationEmailInput,
) (*resendConfirmationEmailResponse, error) {
	req := &graphql.Request{
		OpName: "resendConfirmationEmail",
		Query: `
mutation resendConfirmationEmail ($input: ResendConfirmationEmailInput!) {
	resendConfirmationEmail(input: $input)
}
`,
		Variables: &__resendConfirmationEmailInput{
			Input: input,
		},
	}
	var err error

	var data resendConfirmationEmailResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
