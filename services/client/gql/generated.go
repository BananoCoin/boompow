// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package gql

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns LoginInput.Email, and is useful for accessing the field via an interface.
func (v *LoginInput) GetEmail() string { return v.Email }

// GetPassword returns LoginInput.Password, and is useful for accessing the field via an interface.
func (v *LoginInput) GetPassword() string { return v.Password }

// __loginUserInput is used internally by genqlient
type __loginUserInput struct {
	Input LoginInput `json:"input"`
}

// GetInput returns __loginUserInput.Input, and is useful for accessing the field via an interface.
func (v *__loginUserInput) GetInput() LoginInput { return v.Input }

// loginUserLoginLoginResponse includes the requested fields of the GraphQL type LoginResponse.
type loginUserLoginLoginResponse struct {
	Token string `json:"token"`
}

// GetToken returns loginUserLoginLoginResponse.Token, and is useful for accessing the field via an interface.
func (v *loginUserLoginLoginResponse) GetToken() string { return v.Token }

// loginUserResponse is returned by loginUser on success.
type loginUserResponse struct {
	Login loginUserLoginLoginResponse `json:"login"`
}

// GetLogin returns loginUserResponse.Login, and is useful for accessing the field via an interface.
func (v *loginUserResponse) GetLogin() loginUserLoginLoginResponse { return v.Login }

func loginUser(
	ctx context.Context,
	client graphql.Client,
	input LoginInput,
) (*loginUserResponse, error) {
	req := &graphql.Request{
		OpName: "loginUser",
		Query: `
mutation loginUser ($input: LoginInput!) {
	login(input: $input) {
		token
	}
}
`,
		Variables: &__loginUserInput{
			Input: input,
		},
	}
	var err error

	var data loginUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
